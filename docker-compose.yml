version: '3.8'

services:
  cleaner-app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: germancodezero-cleaner
    restart: unless-stopped
    ports:
      - "80:80"        # Nginx frontend
      - "8000:8000"    # API backend
    volumes:
      - cleaner-data:/app/data
      - cleaner-logs:/app/logs
      - cleaner-models:/app/models
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For system monitoring
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DATABASE_PATH=/app/data/cleaner.db
      - LOG_LEVEL=INFO
      - ENABLE_METRICS=true
      - ENABLE_AI=true
    networks:
      - cleaner-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Redis for caching
  redis:
    image: redis:7-alpine
    container_name: cleaner-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - cleaner-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Optional: PostgreSQL for premium features
  postgres:
    image: postgres:15-alpine
    container_name: cleaner-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=cleaner
      - POSTGRES_PASSWORD=${DB_PASSWORD:-changeme}
      - POSTGRES_DB=cleaner_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - cleaner-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cleaner"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: cleaner-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - cleaner-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: cleaner-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - cleaner-network

networks:
  cleaner-network:
    driver: bridge

volumes:
  cleaner-data:
    driver: local
  cleaner-logs:
    driver: local
  cleaner-models:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local