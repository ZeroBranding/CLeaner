name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    - name: Install dependencies
      run: npm install
    - name: Lint
      run: npm run lint
    - name: Type check
      run: npm run type-check
    - name: Test
      run: npm run test -- --run # Use --run for vitest non-interactive mode
    - name: Build
      run: npm run build

  test-backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest # Assuming pytest is used for testing
    - name: Test with pytest
      run: |
        pytest # This will discover and run tests
        
  release:
    needs: [build-and-test-frontend, test-backend]
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/v')

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build and package
        run: npm run build && npx electron-builder --${{ matrix.os == 'macos-latest' && 'mac' || matrix.os == 'windows-latest' && 'win' || 'linux' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist-electron/*.${{ matrix.os == 'macos-latest' && 'dmg' || matrix.os == 'windows-latest' && 'exe' || 'AppImage' }}
          asset_name: SystemCleaner-Pro-${{ matrix.os }}.${{ matrix.os == 'macos-latest' && 'dmg' || matrix.os == 'windows-latest' && 'exe' || 'AppImage' }}
          asset_content_type: application/octet-stream
